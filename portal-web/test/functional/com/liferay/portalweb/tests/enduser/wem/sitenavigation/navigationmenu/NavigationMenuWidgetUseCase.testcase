@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Navigation";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONUser.tearDownNonAdminUsers();

			UserGroup.tearDownCP();

			Page.tearDownCP();
		}
	}

	@description = "The Navigation Menu widget display style can be changed through setting portal-ext properties."
	@priority = "3"
	test AutomaticChangesToDisplayStyle {
		property custom.properties = "display.style.options=from-level-1-to-all-sublevels${line.separator}navigation.display.style[from-level-1-with-title]=root-layout,absolute,1,auto,true${line.separator}display.style.default=";

		task ("Add a page to the site") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Navigation Display Test Page");
		}

		task ("Navigate to the page") {
			Navigator.gotoPage(pageName = "Navigation Display Test Page");
		}

		task ("Add a Navigation Nenu widget") {
			Portlet.addPG(portletName = "Navigation Menu");
		}

		task ("Assert the page displays in the breadcrumb") {
			var key_pageName = "Navigation Display Test Page";

			AssertTextEquals(
				locator1 = "Navigation#BREADCRUMB_ENTRY",
				value1 = "Navigation Display Test Page");
		}
	}

	@description = "Navigation Menu widget should continue to work when reselecting the default display template"
	@priority = "3"
	test ValidateReturnToDefaultStyle {
		property custom.properties = "display.style.default=from-level-1-with-title${line.separator}navigation.display.style[from-level-1-with-title]=root-layout,absolute,1,auto,true";

		task ("Add a page to the site") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Navigation Display Test Page");
		}

		task ("Navigate to the page") {
			Navigator.gotoPage(pageName = "Navigation Display Test Page");
		}

		task ("Add a Navigation Menu widget to the page") {
			Portlet.addPG(portletName = "Navigation Menu");
		}

		task ("Navigate to the page") {
			Navigator.gotoPage(pageName = "Navigation Display Test Page");
		}

		task ("Assert the Navigation Menu widget has the page") {
			var key_pageName = "Navigation Display Test Page";

			AssertTextEquals(
				locator1 = "Navigation#BREADCRUMB_ENTRY",
				value1 = "Navigation Display Test Page");
		}

		task ("Configure Navigation Menu widget to use the default 'Bar minimally styled' display template") {
			ApplicationDisplayTemplates.selectPortletADT(
				portletName = "Navigation Menu",
				templateName = "Bar minimally styled");
		}

		task ("Assert the Navigation Menu widget has the page") {
			Navigator.gotoPage(pageName = "Navigation Display Test Page");

			AssertTextEquals(
				locator1 = "Navigation#BREADCRUMB_ENTRY",
				value1 = "Navigation Display Test Page");
		}
	}

}