@component-name = "portal-collaboration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Blogs";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Staging Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Staging Blogs Page",
			widgetName = "Blogs");

		JSONStaging.enableLocalStaging(groupName = "Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			BlogsEntry.tearDownCP();

			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}
	}

	@description = "This test covers LPS-79000. It ensures that users can only publish an Approved blog entry. Draft entries should not have the Publish option."
	@priority = "5"
	@refactordone
	test CannotPublishUnapprovedDraft {
		BlogsNavigator.openToStagingCP(
			groupName = "Site Name",
			siteURLKey = "site-name-staging");

		Blogs.addDraft(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToStagingCP(
			groupName = "Site Name",
			siteURLKey = "site-name-staging");

		Blogs.assertNoPublishOption(entryTitle = "Blogs Entry Title");
	}

	@description = "This test covers LPS-77658. It publishes a blog entry to live via Single Asset Publishing."
	@priority = "4"
	@refactordone
	test CanPublishEntryViaSAP {
		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name (Staging)",
			site = "false");

		BlogsNavigator.openToStagingCP(
			groupName = "Site Name",
			siteURLKey = "site-name-staging");

		LexiconEntry.changeDisplayStyle(displayStyle = "Cards");

		Blogs.publishViaSAP(
			confirmMessage = "Are you sure you want to publish to live?",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Staging Blogs Page",
			siteURLKey = "site-name");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Notifications.viewBadgeCount(
			activePanel = "Notifications",
			notificationCount = "2");

		Notifications.gotoNotifications();

		Notifications.viewSuccessfulPublication(
			contentBody = "Publication Process Finished Successfully",
			portletName = "Blogs Portlet",
			publicationType = "Local");
	}

	@priority = "3"
	@refactorneeded
	test CanPublishScheduledEntry {
		property test.name.skip.portal.instance = "BlogsUsecase#StagingBlogsWithScheduledPublishing";

		// Can still explore how to schedule a Blog entry through JSON. This would involve using DateUtil.java

		BlogsNavigator.openToAddEntry(siteURLKey = "site-name-staging");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.scheduleBlogEntry();

		PortletEntry.publish();

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Navigator.gotoNavItem(navItem = "Not Published (1)");

		Staging.gotoPublishToLive();

		Staging.configurePublishToLive(
			checkContentNameList = "Blogs",
			checkPageName = "Staging Blogs Page");

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Blogs.viewNoEntryCP();

		Pause(locator1 = "120000");

		Refresh();

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This is a use case for LPS-122140. It ensures that a small image can be published."
	@priority = "5"
	@refactordone
	test CanPublishSmallImage {
		BlogsNavigator.openToAddEntry(siteURLKey = "site-name-staging");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.addSmallImage(
			navTab = "Blog Images",
			uploadFileName = "Document_3.jpg");

		PortletEntry.publish();

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Refresh();

		AssertElementPresent(
			key_imageFileName = "Document_3.jpg",
			locator1 = "BlogsEntry#CONTENT_SMALL_IMAGE");
	}

	@description = "This is a use case for LPS-78833. It ensures that a small image deletion can be published."
	@priority = "5"
	@refactorneeded
	test CanPublishSmallImageDeletion {
		BlogsNavigator.openToAddEntry(siteURLKey = "site-name-staging");

		// Can explore how to add Blog with small image via JSON

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.addSmallImage(
			navTab = "Blog Images",
			uploadFileName = "Document_3.jpg");

		PortletEntry.publish();

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		BlogsNavigator.openToEditEntryInSite(
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name",
			siteURLKey = "site-name-staging");

		BlogsEntry.removeSmallImage(uploadFileName = "Document_3.jpg");

		PortletEntry.publish();

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name-staging");

		LexiconEntry.changeDisplayStyle(displayStyle = "cards");

		AssertElementPresent(
			key_entryTitle = "Blogs Entry Title",
			locator1 = "Blogs#ICON_VIEW_ENTRY_TITLE");

		Navigator.gotoNavItem(navItem = "Images");

		LexiconCard.viewCardPresent(card = "Document_3.jpg");

		LexiconCard.viewCardNotPresent(card = "Document_3 (1).jpg");
	}

	@description = "This test covers LPS-99265. It ensures that a staged blogs entry cannot be shared unless it is first published to Live."
	@priority = "4"
	@refactordone
	test CanShareBlogsEntryOnLiveSite {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name (Staging)",
			site = "false");

		BlogsNavigator.openToStagingCP(
			groupName = "Site Name",
			siteURLKey = "site-name-staging");

		AssertElementNotPresent(
			key_menuItem = "Share",
			locator1 = "MenuItem#ANY_MENU_ITEM");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

		BlogsNavigator.gotoShare(entryTitle = "Blogs Entry Title");

		Asset.share(
			sharingPermissions = "View",
			userEmailAddress = "userea@liferay.com",
			userName = "userfn userln");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Notifications.viewBadgeCount(notificationCount = "1");

		Notifications.gotoNotifications();

		Notifications.viewNewSharedContent(
			contentSharingPermission = "viewing",
			contentTitle = "Blogs Entry Title",
			ownerName = "Test Test");
	}

	@description = "This is a use case for LPS-72949."
	@priority = "5"
	@refactorneeded
	test StagingLocalLiveLockAndEditBlogsEntry {
		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name (Staging)",
			site = "false");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		BlogsEntry.editNoPermissionPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		ProductMenu.gotoPortlet(
			category = "Publishing",
			portlet = "Staging");

		Staging.editStagingConfiguration(isNotEditable = "Blogs");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Blogs.editEntryPG(
			entryContent = "Blogs Entry Content",
			entryContentEdit = "Blogs Entry Content Edit",
			entryTitle = "Blogs Entry Title",
			entryTitleEdit = "Blogs Entry Title Edit");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title Edit",
			layoutName = "Staging Blogs Page",
			siteURLKey = "site-name");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content Edit",
			entryTitle = "Blogs Entry Title Edit");
	}

	@description = "This is a use case for LPS-80543."
	@priority = "5"
	@refactorneeded
	test ViewBlogsAsAGuestAndSiteMember {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		var portalURL = PropsUtil.get("portal.url");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editUserSiteCP(
			siteName = "Site Name",
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Blogs.addEntryWithUploadedCoverImage(
			coverImageName = "Document_1",
			entryContent = "Blogs Entry Content 1",
			entryTitle = "Blogs Entry Title 1",
			navTab = "Blog Images",
			uploadFileName = "Document_1.jpg");

		Button.clickPublish();

		Pause(locator1 = "3000");

		Alert.viewSuccessMessage();

		BlogsNavigator.gotoAddEntry();

		BlogsEntry.addTitle(entryTitle = "Blogs Entry Title 2");

		BlogsEntry.addContentWithInlineImage(
			entryContent = "Blogs Entry Content 2",
			navTab = "Blog Images",
			uploadFileName = "Document_2.jpg");

		Pause(locator1 = "3000");

		PortletEntry.publish();

		BlogsNavigator.gotoAddEntry();

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content 3",
			entryTitle = "Blogs Entry Title 3");

		AlloyEditor.addEntryExternalURL(entryExternalURL = "www.liferay.com");

		PortletEntry.publish();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title 1",
			layoutName = "Staging Blogs Page",
			siteURLKey = "site-name");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content 1",
			entryTitle = "Blogs Entry Title 1",
			uploadFileName = "Document_1.jpg");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title 2",
			layoutName = "Staging Blogs Page",
			siteURLKey = "site-name");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content 2",
			entryInlineImage = "Document_2.jpg",
			entryTitle = "Blogs Entry Title 2");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title 3",
			layoutName = "Staging Blogs Page",
			siteURLKey = "site-name");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content 3",
			entryExternalURL = "https://www.liferay.com",
			entryTitle = "Blogs Entry Title 3");

		Open(locator1 = "${portalURL}/web/site-name-staging/staging-blogs-page");

		User.logoutPG();

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title 1",
			layoutName = "Staging Blogs Page",
			siteURLKey = "site-name");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content 1",
			entryTitle = "Blogs Entry Title 1",
			uploadFileName = "Document_1.jpg");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title 2",
			layoutName = "Staging Blogs Page",
			siteURLKey = "site-name");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content 2",
			entryInlineImage = "Document_2.jpg",
			entryTitle = "Blogs Entry Title 2");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title 3",
			layoutName = "Staging Blogs Page",
			siteURLKey = "site-name");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content 3",
			entryExternalURL = "https://www.liferay.com",
			entryTitle = "Blogs Entry Title 3");

		Open(locator1 = "${portalURL}/web/site-name-staging/staging-blogs-page");
	}

}